A commitment scheme is a cryptographic primitive that allows one to commit to a chosen value (or chosen statement) while keeping it hidden to others, with the ability to reveal the committed value later.[1] Commitment schemes are designed so that a party cannot change the value or statement after they have committed to it: that is, commitment schemes are binding. Commitment schemes have important applications in a number of cryptographic protocols including secure coin flipping, zero-knowledge proofs, and secure computation.

A way to visualize a commitment scheme is to think of a sender as putting a message in a locked box, and giving the box to a receiver. The message in the box is hidden from the receiver, who cannot open the lock themselves. Since the receiver has the box, the message inside cannot be changed—merely revealed if the sender chooses to give them the key at some later time.

Interactions in a commitment scheme take place in two phases:

In the above metaphor, the commit phase is the sender putting the message in the box, and locking it. The reveal phase is the sender giving the key to the receiver, who uses it to open the box and verify its contents. The locked box is the commitment, and the key is the proof.

In simple protocols, the commit phase consists of a single message from the sender to the receiver. This message is called the commitment. It is essential that the specific value chosen cannot be known by the receiver at that time (this is called the hiding property). A simple reveal phase would consist of a single message, the opening, from the sender to the receiver, followed by a check performed by the receiver. The value chosen during the commit phase must be the only one that the sender can compute and that validates during the reveal phase (this is called the binding property).

The concept of commitment schemes was perhaps first formalized by Gilles Brassard, David Chaum, and Claude Crépeau in 1988,[2] as part of various zero-knowledge protocols for NP, based on various types of commitment schemes.[3][4] But the concept was used prior to that without being treated formally.[5][6] The notion of commitments appeared earliest in works by Manuel Blum,[7] Shimon Even,[8] and Adi Shamir et al.[9] The terminology seems to have been originated by Blum,[6] although commitment schemes can be interchangeably called bit commitment schemes—sometimes reserved for the special case where the committed value is a bit. Earlier to that, commitment via one-way hash functions was considered, e.g., as part of, say, Lamport signature, the original one-time one-bit signature scheme.

Suppose Alice and Bob want to resolve some dispute via coin flipping. If they are physically in the same place, a typical procedure might be:

If Alice and Bob are not in the same place a problem arises. Once Alice has "called" the coin flip, Bob can stipulate the flip "results" to be whatever is most desirable for him. Similarly, if Alice doesn't announce her "call" to Bob, after Bob flips the coin and announces the result, Alice can report that she called whatever result is most desirable for her. Alice and Bob can use commitments in a procedure that will allow both to trust the outcome:

For Bob to be able to skew the results to his favor, he must be able to understand the call hidden in Alice's commitment. If the commitment scheme is a good one, Bob cannot skew the results.  Similarly, Alice cannot affect the result if she cannot change the value she commits to.

A real-life application of this problem exists, when people (often in media) commit to a decision or give an answer in a "sealed envelope", which is then opened later. "Let's find out if that's what the candidate answered", for example on a game show, can serve as a model of this system.

One particular motivating example is the use of commitment schemes in zero-knowledge proofs. Commitments are used in zero-knowledge proofs for two main purposes: first, to allow the prover to participate in "cut and choose" proofs where the verifier will be presented with a choice of what to learn, and the prover will reveal only what corresponds to the verifier's choice. Commitment schemes allow the prover to specify all the information in advance, and only reveal what should be revealed later in the proof.[10] 
Second, commitments are also used in zero-knowledge proofs by the verifier, who will often specify their choices ahead of time in a commitment. This allows zero-knowledge proofs to be composed in parallel without revealing additional information to the prover.[11]

The Lamport signature scheme is a digital signature system that relies on maintaining two sets of secret data packets, publishing verifiable hashes of the data packets, and then selectively revealing partial secret data packets in a manner that conforms specifically to the data to be signed. In this way, the prior public commitment to the secret values becomes a critical part of the functioning of the system.

Because the Lamport signature system cannot be used more than once, a system to combine many Lamport key-sets under a single public value that can be tied to a person and verified by others was developed. This system uses trees of hashes to compress many published Lamport-key-commitment sets into a single hash value that can be associated with the prospective author of later-verified data.

Another important application of commitments is in verifiable secret sharing, a critical building block of secure multiparty computation. In a secret sharing scheme, each of several parties receive "shares" of a value that is meant to be hidden from everyone. If enough parties get together, their shares can be used to reconstruct the secret, but even a malicious cabal of insufficient size should learn nothing. Secret sharing is at the root of many protocols for secure computation: in order to securely compute a function of some shared input, the secret shares are manipulated instead. However, if shares are to be generated by malicious parties, it may be important that those shares can be checked for correctness. In a verifiable secret sharing scheme, the distribution of a secret is accompanied by commitments to the individual shares. The commitments reveal nothing that can help a dishonest cabal, but the shares allow each individual party to check to see if their shares are correct.[12]

Formal definitions of commitment schemes vary strongly in notation and in flavour. The first such flavour is whether the commitment scheme provides perfect or computational security with respect to the hiding or binding properties.  Another such flavour is whether the commitment is interactive, i.e. whether both the commit phase and the reveal phase can be seen as being executed by a cryptographic protocol or whether they are non-interactive, consisting of two algorithms Commit and CheckReveal. In the latter case CheckReveal can often be seen as a derandomised version of Commit, with the randomness used by Commit constituting the opening information.

If the commitment C to a value x is computed as C:=Commit(x,open) with open being the randomness used for computing the commitment, then CheckReveal (C,x,open) reduces to simply verifying the equation C=Commit (x,open).

Using this notation and some knowledge about mathematical functions and probability theory we formalise different versions of the binding and hiding properties of commitments. The two most important combinations of these properties are perfectly binding and computationally hiding commitment schemes and computationally binding and perfectly hiding commitment schemes. Note that no commitment scheme can be at the same time perfectly binding and perfectly hiding – a computationally unbounded adversary can simply generate Commit(x,open) for every value of x and open until finding a pair that outputs C, and in a perfectly binding scheme this uniquely identifies x.

Let open be chosen from a set of size 




2

k




{\displaystyle 2^{k}}

, i.e., it can be represented as a k bit string, and let  





Commit


k




{\displaystyle {\text{Commit}}_{k}}

 be the corresponding commitment scheme. As the size of k determines the security of the commitment scheme it is called the security parameter.

Then for all non-uniform probabilistic polynomial time algorithms that output 



x
,

x
′



{\displaystyle x,x'}

 and 



o
p
e
n
,
o
p
e

n
′



{\displaystyle open,open'}

 of increasing length k, the probability that 



x
≠

x
′



{\displaystyle x\neq x'}

 and 





Commit


k


(
x
,
o
p
e
n
)
=


Commit


k


(

x
′

,
o
p
e

n
′

)


{\displaystyle {\text{Commit}}_{k}(x,open)={\text{Commit}}_{k}(x',open')}

 is a negligible function in k.

This is a form of asymptotic analysis. It is also possible to state the same requirement using concrete security: A commitment scheme Commit is 



(
t
,
ϵ
)


{\displaystyle (t,\epsilon )}

 secure, if for all algorithms that run in time t and output 



x
,

x
′

,
o
p
e
n
,
o
p
e

n
′



{\displaystyle x,x',open,open'}

 the probability that 



x
≠

x
′



{\displaystyle x\neq x'}

 and 




Commit

(
x
,
o
p
e
n
)
=

Commit

(

x
′

,
o
p
e

n
′

)


{\displaystyle {\text{Commit}}(x,open)={\text{Commit}}(x',open')}

 is at most 



ϵ


{\displaystyle \epsilon }

.

Let 




U

k




{\displaystyle U_{k}}

 be the uniform distribution over the 




2

k




{\displaystyle 2^{k}}

 opening values for security parameter k. A commitment scheme is respectively perfect, statistical, or computational hiding, if for all 



x
≠

x
′



{\displaystyle x\neq x'}

 the probability ensembles 



{


Commit


k


(
x
,

U

k


)

}

k
∈

N





{\displaystyle \{{\text{Commit}}_{k}(x,U_{k})\}_{k\in \mathbb {N} }}

 and 



{


Commit


k


(

x
′

,

U

k


)

}

k
∈

N





{\displaystyle \{{\text{Commit}}_{k}(x',U_{k})\}_{k\in \mathbb {N} }}

 are equal, statistically close, or computationally indistinguishable.

It is impossible to realize commitment schemes in the universal composability
(UC) framework. The reason is that UC commitment has to be extractable, as shown by Canetti and Fischlin[13] and explained below.

The ideal commitment functionality, denoted here by F, works roughly as follows. Committer C sends value m to F, which
stores it and sends "receipt" to receiver R. Later, C sends "open" to
F, which sends m to R.

Now, assume we have a protocol π that realizes this functionality. Suppose that the committer C is corrupted. In the UC framework, that essentially means that C is now controlled by the environment, which attempts to distinguish protocol execution from the ideal process. Consider an environment that chooses a message m and then tells C to act as prescribed by π, as if it has committed to m. Note here that in order to realize F, the receiver must, after receiving a commitment, output a message "receipt". After the environment sees this message, it tells C to open the commitment.

The protocol is only secure if this scenario is indistinguishable from the ideal case, where the functionality interacts with a simulator S. Here, S has control of C. In particular, whenever R outputs "receipt", F has to do likewise. The only way to do that is for S to tell C to send a value to F. However, note
that by this point, m is not known to S. Hence, when the commitment is opened during protocol execution, it is unlikely that F will open to m, unless S can extract m from the messages it received from the environment before R outputs the receipt.

However a protocol that is extractable in this sense cannot be statistically hiding. Suppose such a simulator S exists. Now consider an
environment that, instead of corrupting C, corrupts R instead. Additionally it runs a copy of S. Messages received from C are fed into S, and replies from S are forwarded to C.

The environment initially tells C to commit to a message m. At some point in the interaction, S will commit to a value m′. This message is handed to R, who outputs m′. Note that by assumption we have m' = m with high probability. Now in the ideal process the simulator has to come up with m. But this is impossible, because at this point the commitment has not been opened yet, so the only message R can have received in the ideal process is a "receipt" message. We thus have a contradiction.

A commitment scheme can either be perfectly binding (it is impossible for Alice to alter her commitment after she has made it, even if she has unbounded computational resources); or perfectly concealing (it is impossible for Bob to find out the commitment without Alice revealing it, even if he has unbounded computational resources); or formulated as an instance-dependent commitment scheme, which is either hiding or binding depending on the solution to another problem.[14][15] A commitment scheme can not be both perfectly hiding and perfectly binding at the same time.

Bit-commitment schemes are trivial to construct in the random oracle model. Given a hash function H with a 3k bit output, to commit the k-bit message m, Alice generates a random k bit string R and sends Bob H(R||m). The probability that any R′, m′ exist where m′ ≠ m such that H(R′||m′) = H(R||m) is ≈ 2−k, but to test any guess at the message m Bob will need to make 2k (for an incorrect guess) or 2k-1 (on average, for a correct guess) queries to the random oracle.[16] We note that earlier schemes based on hash functions, essentially can be thought of schemes based on idealization of these hash functions as random oracle.

One can create a bit-commitment scheme from any one-way function that is injective. The scheme relies on the fact that every one-way function can be modified (via the Goldreich-Levin theorem) to possess a computationally hard-core predicate (while retaining the injective property).

Let f be an injective one-way function, with h a hard-core predicate. Then to commit to a bit b Alice picks a random input x and sends the triple

to Bob, where 



⊕


{\displaystyle \oplus }

 denotes XOR, i.e., bitwise addition modulo 2. To decommit, Alice simply sends x to Bob. Bob verifies by computing f(x) and comparing to the committed value. This scheme is concealing because for Bob to recover b he must recover h(x). Since h is a computationally hard-core predicate, recovering h(x) from  f(x) with probability greater than one-half is as hard as inverting f. Perfect binding follows from the fact that f is injective and thus f(x) has exactly one preimage.

Note that since we do not know how to construct a one-way permutation from any one-way function, this section reduces the strength of the cryptographic assumption necessary to construct a bit-commitment protocol.

In 1991 Moni Naor showed how to create a bit-commitment scheme from a cryptographically secure pseudorandom number generator.[17] The construction is as follows. If G is a pseudo-random generator such that G takes n bits to 3n bits, then if Alice wants to commit to a bit b:

To decommit Alice sends Y to Bob, who can then check whether he initially received G(Y) or G(Y) 



⊕


{\displaystyle \oplus }

 R.

This scheme is statistically binding, meaning that even if Alice is computationally unbounded she cannot cheat with probability greater than 2−n. For Alice to cheat, she would need to find a Y', such that G(Y') = G(Y) 



⊕


{\displaystyle \oplus }

 R. If she could find such a value, she could decommit by sending the truth and Y, or send the opposite answer and Y'. However, G(Y) and G(Y') are only able to produce 2n possible values each (that's 22n) while R is picked out of 23n values. She does not pick R, so there is a 22n/23n = 2−n probability that a Y' satisfying the equation required to cheat will exist.

The concealing property follows from a standard reduction, if Bob can tell whether Alice committed to a zero or one, he can also distinguish the output of the pseudo-random generator G from true-random, which contradicts the cryptographic security of G.

Alice chooses a ring of prime order p, with multiplicative generator g.

Alice randomly picks a secret value x from 0 to p − 1 to commit to and calculates c = gx and publishes c. The discrete logarithm problem dictates that from c, it is computationally infeasible to compute x, so under this assumption, Bob cannot compute x. On the other hand, Alice cannot compute a x′ <> x, such that gx′ = c, so the scheme is binding.

This scheme isn't perfectly concealing as someone could find the commitment if he manages to solve the discrete logarithm problem. In fact, this scheme isn't hiding at all with respect to the standard hiding game, where an adversary should be unable to guess which of two messages he chose were committed to - similar to the IND-CPA game. One consequence of this is that if the space of possible values of x is small, then an attacker could simply try them all and the commitment would not be hiding.

A better example of a perfectly binding commitment scheme is one where the commitment is the encryption of x under a semantically secure, public-key encryption scheme with perfect completeness, and the decommitment is the string of random bits used to encrypt x. An example of an information-theoretically hiding commitment scheme is the Pedersen commitment scheme,[18] which is computationally binding under the discrete logarithm assumption.
[19]
Additionally to the scheme above, it uses another generator h of the prime group and a random number r. The commitment is set 



c
=

g

x



h

r




{\displaystyle c=g^{x}h^{r}}

.[20]

These constructions are tightly related to and based on the algebraic properties of the underlying groups, and the notion originally seemed to be very much related to the algebra. However, it was shown that basing statistically binding commitment schemes on general unstructured assumption is possible, via the notion of interactive hashing 
for commitments from general complexity assumptions (specifically and originally, based on any one way permutation) as in.[21]

Alice selects 



N


{\displaystyle N}

 such that 



N
=
p
⋅
q


{\displaystyle N=p\cdot q}

, where 



p


{\displaystyle p}

 and 



q


{\displaystyle q}

 are large secret prime numbers. Additionally, she selects a prime 



e


{\displaystyle e}

 such that 



e
>

N

2




{\displaystyle e>N^{2}}

 and 



g
c
d
(
e
,
ϕ
(

N

2


)
)
=
1


{\displaystyle gcd(e,\phi (N^{2}))=1}

. Alice then computes a public number 




g

m




{\displaystyle g_{m}}

 as an element of maximum order in the 





Z



N

2




∗




{\displaystyle \mathbb {Z} _{N^{2}}^{*}}

 group.[22] Finally, Alice commits to her secret 



m


{\displaystyle m}

 by first generating a random number 



r


{\displaystyle r}

 from 





Z



N

2




∗




{\displaystyle \mathbb {Z} _{N^{2}}^{*}}

 and then by computing 



c
=

m

e



g

m


r




{\displaystyle c=m^{e}g_{m}^{r}}

.

The security of the above commitment relies on the hardness of the RSA problem and has perfect hiding and computational binding.[23]

The Pedersen commitment scheme introduces an interesting homomorphic property that allows performing addition between two commitments. More specifically, given two messages 




m

1




{\displaystyle m_{1}}

 and 




m

2




{\displaystyle m_{2}}

 and randomness 




r

1




{\displaystyle r_{1}}

 and 




r

2




{\displaystyle r_{2}}

, respectively, the it is possible to generate a new commitment such that: 



C
(

m

1


,

r

1


)
⋅
C
(

m

2


,

r

2


)
=
C
(

m

1


+

m

2


,

r

1


+

r

2


)


{\displaystyle C(m_{1},r_{1})\cdot C(m_{2},r_{2})=C(m_{1}+m_{2},r_{1}+r_{2})}

. Formally:





C
(

m

1


,

r

1


)
⋅
C
(

m

2


,

r

2


)
=

g


m

1





h


r

1




⋅

g


m

2





h


r

2




=

g


m

1


+

m

2





h


r

1


+

r

2




=
C
(

m

1


+

m

2


,

r

1


+

r

2


)


{\displaystyle C(m_{1},r_{1})\cdot C(m_{2},r_{2})=g^{m_{1}}h^{r_{1}}\cdot g^{m_{2}}h^{r_{2}}=g^{m_{1}+m_{2}}h^{r_{1}+r_{2}}=C(m_{1}+m_{2},r_{1}+r_{2})}



To open the above Pedersen commitment to a new message 




m

1


+

m

2




{\displaystyle m_{1}+m_{2}}

, the randomness 




r

1




{\displaystyle r_{1}}

 and 




r

2




{\displaystyle r_{2}}

 has to be added.

Similarly, the RSA-based commitment mentioned above has a homomorphic property with respect to the multiplication operation. Given two messages 




m

1




{\displaystyle m_{1}}

 and 




m

2




{\displaystyle m_{2}}

 with randomness 




r

1




{\displaystyle r_{1}}

 and 




r

2




{\displaystyle r_{2}}

, respectively, one can compute: 



C
(

m

1


,

r

1


)
⋅
C
(

m

2


,

r

2


)
=
C
(

m

1


⋅

m

2


,

r

1


+

r

2


)


{\displaystyle C(m_{1},r_{1})\cdot C(m_{2},r_{2})=C(m_{1}\cdot m_{2},r_{1}+r_{2})}

. Formally:




C
(

m

1


,

r

1


)
⋅
C
(

m

2


,

r

2


)
=

m

1


e



g

m



r

1




⋅

m

2


e



g

m



r

2




=
(

m

1


⋅

m

2



)

e



g

m



r

1


+

r

2




=
C
(

m

1


⋅

m

2


,

r

1


+

r

2


)


{\displaystyle C(m_{1},r_{1})\cdot C(m_{2},r_{2})=m_{1}^{e}g_{m}^{r_{1}}\cdot m_{2}^{e}g_{m}^{r_{2}}=(m_{1}\cdot m_{2})^{e}g_{m}^{r_{1}+r_{2}}=C(m_{1}\cdot m_{2},r_{1}+r_{2})}

.

To open the above commitment to a new message 




m

1


⋅

m

2




{\displaystyle m_{1}\cdot m_{2}}

, the randomness 




r

1




{\displaystyle r_{1}}

 and 




r

2




{\displaystyle r_{2}}

 has to be added. This newly generated commitment is distributed similarly to a new commitment to 




m

1


⋅

m

2




{\displaystyle m_{1}\cdot m_{2}}

.

Some commitment schemes permit a proof to be given of only a portion of the committed value. In these schemes, the secret value 



X


{\displaystyle X}

 is a vector of many individually separable values.

The commitment 



C


{\displaystyle C}

 is computed from 



X


{\displaystyle X}

 in the commit phase. Normally, in the reveal phase, the prover would reveal all of 



X


{\displaystyle X}

 and some additional proof data (such as 



R


{\displaystyle R}

 in simple bit-commitment). Instead, the prover is able to reveal any single value from the 



X


{\displaystyle X}

 vector, and create an efficient proof that it is the authentic 



i


{\displaystyle i}

th element of the original vector that created the commitment 



C


{\displaystyle C}

. The proof does not require any values of 



X


{\displaystyle X}

 other than 




x

i




{\displaystyle x_{i}}

 to be revealed, and it is impossible to create valid proofs that reveal different values for any of the 




x

i




{\displaystyle x_{i}}

 than the true one.[24]

Vector hashing is a naive vector commitment partial reveal scheme based on bit-commitment. Values 




m

1


,

m

2


,
.
.
.

m

n




{\displaystyle m_{1},m_{2},...m_{n}}

 are chosen randomly. Individual commitments are created by hashing 




y

1


=
H
(

x

1



|


|


m

1


)
,

y

2


=
H
(

x

2



|


|


m

2


)
,
.
.
.


{\displaystyle y_{1}=H(x_{1}||m_{1}),y_{2}=H(x_{2}||m_{2}),...}

. The overall commitment is computed as

In order to prove one element of the vector 



X


{\displaystyle X}

, the prover reveals the values

The verifier is able to compute 




y

i




{\displaystyle y_{i}}

 from 




x

i




{\displaystyle x_{i}}

 and 




m

i




{\displaystyle m_{i}}

, and then is able to verify that the hash of all 



y


{\displaystyle y}

 values is the commitment 



C


{\displaystyle C}

. 
Unfortunately the proof is 



O
(
n
)


{\displaystyle O(n)}

 in size and verification time. Alternately, if 



C


{\displaystyle C}

 is the set of all 



y


{\displaystyle y}

 values, then the commitment is 



O
(
n
)


{\displaystyle O(n)}

 in size, and the proof is 



O
(
1
)


{\displaystyle O(1)}

 in size and verification time. Either way, the commitment or the proof scales with 



O
(
n
)


{\displaystyle O(n)}

 which is not optimal.

A common example of a practical partial reveal scheme is a Merkle tree, in which a binary hash tree is created of the elements of 



X


{\displaystyle X}

. This scheme creates commitments that are 



O
(
1
)


{\displaystyle O(1)}

 in size, and proofs that are 



O
(

log

2


⁡

n

)


{\displaystyle O(\log _{2}{n})}

 in size and verification time. The root hash of the tree is the commitment 



C


{\displaystyle C}

. To prove that a revealed 




x

i




{\displaystyle x_{i}}

 is part of the original tree, only 




log

2


⁡

n



{\displaystyle \log _{2}{n}}

 hash values from the tree, one from each level, must be revealed as the proof. The verifier is able to follow the path from the claimed leaf node all the way up to the root, hashing in the sibling nodes at each level, and eventually arriving at a root node value that must equal 



C


{\displaystyle C}

.[25]

A Kate-Zaverucha-Goldberg commitment uses pairing-based cryptography to build a partial reveal scheme with 



O
(
1
)


{\displaystyle O(1)}

 commitment sizes, proof sizes, and proof verification time. In other words, as 



n


{\displaystyle n}

, the number of values in 



X


{\displaystyle X}

, increases, the commitments and proofs do not get larger, and the proofs do not take any more effort to verify.

A KZG commitment requires a predetermined set of parameters to create a pairing, and a trusted trapdoor element. For example, a Tate pairing can be used. Assume that 





G


1


,


G


2




{\displaystyle \mathbb {G} _{1},\mathbb {G} _{2}}

 are the additive groups, and 





G


T




{\displaystyle \mathbb {G} _{T}}

 is the multiplicative group of the pairing. In other words, the pairing is the map 



e
:


G


1


×


G


2


→


G


T




{\displaystyle e:\mathbb {G} _{1}\times \mathbb {G} _{2}\rightarrow \mathbb {G} _{T}}

. Let 



t
∈


F


p




{\displaystyle t\in \mathbb {F} _{p}}

 be the trapdoor element (if 



p


{\displaystyle p}

 is the prime order of 





G


1




{\displaystyle \mathbb {G} _{1}}

 and 





G


2




{\displaystyle \mathbb {G} _{2}}

), and let 



G


{\displaystyle G}

 and 



H


{\displaystyle H}

 be the generators of 





G


1




{\displaystyle \mathbb {G} _{1}}

 and 





G


2




{\displaystyle \mathbb {G} _{2}}

 respectively. As part of the parameter setup, we assume that 



G
⋅

t

i




{\displaystyle G\cdot t^{i}}

 and 



H
⋅

t

i




{\displaystyle H\cdot t^{i}}

 are known and shared values for arbitrarily many positive integer values of 



i


{\displaystyle i}

, while the trapdoor value 



t


{\displaystyle t}

 itself is discarded and known to no one.

A KZG commitment reformulates the vector of values to be committed as a polynomial. First, we calculate a polynomial such that 



p
(
i
)
=

x

i




{\displaystyle p(i)=x_{i}}

 for all values of 




x

i




{\displaystyle x_{i}}

 in our vector. Lagrange interpolation allows us to compute that polynomial

Under this formulation, the polynomial now encodes the vector, where 



p
(
0
)
=

x

0


,
p
(
1
)
=

x

1


,
.
.
.


{\displaystyle p(0)=x_{0},p(1)=x_{1},...}

. Let 




p

0


,

p

1


,
.
.
.
,

p

n
−
1




{\displaystyle p_{0},p_{1},...,p_{n-1}}

 be the coefficients of 



p


{\displaystyle p}

, such that 



p
(
x
)
=

∑

i
=
0


n
−
1



p

i



x

i




{\textstyle p(x)=\sum _{i=0}^{n-1}p_{i}x^{i}}

. The commitment is calculated as

This is computed simply as a dot product between the predetermined values 



G
⋅

t

i




{\displaystyle G\cdot t^{i}}

 and the polynomial coefficients 




p

i




{\displaystyle p_{i}}

. Since 





G


1




{\displaystyle \mathbb {G} _{1}}

 is an additive group with associativity and commutativity, 



C


{\displaystyle C}

 is equal to simply 



G
⋅
p
(
t
)


{\displaystyle G\cdot p(t)}

, since all the additions and multiplications with 



G


{\displaystyle G}

 can be distributed out of the evaluation. Since the trapdoor value 



t


{\displaystyle t}

 is unknown, the commitment 



C


{\displaystyle C}

 is essentially the polynomial evaluated at a number known to no one, with the outcome obfuscated into an opaque element of 





G


1




{\displaystyle \mathbb {G} _{1}}

.

A KZG proof must demonstrate that the revealed data is the authentic value of 




x

i




{\displaystyle x_{i}}

 when 



C


{\displaystyle C}

 was computed. Let 



y
=

x

i




{\displaystyle y=x_{i}}

, the revealed value we must prove. Since the vector of 




x

i




{\displaystyle x_{i}}

 was reformulated into a polynomial, we really need to prove that the polynomial 



p


{\displaystyle p}

, when evaluated at 



i


{\displaystyle i}

 takes on the value 



y


{\displaystyle y}

. Simply, we just need to prove that 



p
(
i
)
=
y


{\displaystyle p(i)=y}

. We will do this by demonstrating that subtracting 



y


{\displaystyle y}

 from 



p


{\displaystyle p}

 yields a root at 



i


{\displaystyle i}

. Define the polynomial 



q


{\displaystyle q}

 as

This polynomial is itself the proof that 



p
(
i
)
=
y


{\displaystyle p(i)=y}

, because if 



q


{\displaystyle q}

 exists, then 



p
(
x
)
−
y


{\displaystyle p(x)-y}

 is divisible by 



x
−
i


{\displaystyle x-i}

, meaning it has a root at 



i


{\displaystyle i}

, so 



p
(
i
)
−
y
=
0


{\displaystyle p(i)-y=0}

 (or, in other words, 



p
(
i
)
=
y


{\displaystyle p(i)=y}

). The KZG proof will demonstrate that 



q


{\displaystyle q}

 exists and has this property.

The prover computes 



q


{\displaystyle q}

 through the above polynomial division, then calculates the KZG proof value 



π


{\displaystyle \pi }



This is equal to 



G
⋅
q
(
t
)


{\displaystyle G\cdot q(t)}

, as above. In other words, the proof value is the polynomial 



q


{\displaystyle q}

 again evaluated at the trapdoor value 



t


{\displaystyle t}

, hidden in the generator 



G


{\displaystyle G}

 of 





G


1




{\displaystyle \mathbb {G} _{1}}

.

This computation is only possible if the above polynomials were evenly divisible, because in that case the quotient 



q


{\displaystyle q}

 is a polynomial, not a rational function. Due to the construction of the trapdoor, it is not possible to evaluate a rational function at the trapdoor value, only to evaluate a polynomial using linear combinations of the precomputed known constants of 



G
⋅

t

i




{\displaystyle G\cdot t^{i}}

. This is why it is impossible to create a proof for an incorrect value of 




x

i




{\displaystyle x_{i}}

.

To verify the proof, the bilinear map of the pairing is used to show that the proof value 



π


{\displaystyle \pi }

 summarizes a real polynomial 



q


{\displaystyle q}

 that demonstrates the desired property, which is that 



p
(
x
)
−
y


{\displaystyle p(x)-y}

 was evenly divided by 



x
−
i


{\displaystyle x-i}

. The verification computation checks the equality

where 



e


{\displaystyle e}

 is the bilinear map function as above. 



H
⋅
t


{\displaystyle H\cdot t}

 is a precomputed constant, 



H
⋅
i


{\displaystyle H\cdot i}

 is computed based on 



i


{\displaystyle i}

.

By rewriting the computation in the pairing group 





G


T




{\displaystyle \mathbb {G} _{T}}

, substituting in 



π
=
q
(
t
)
⋅
G


{\displaystyle \pi =q(t)\cdot G}

 and 



C
=
p
(
t
)
⋅
G


{\displaystyle C=p(t)\cdot G}

, and letting 



τ
(
x
)
=
e
(
G
,
H

)

x




{\displaystyle \tau (x)=e(G,H)^{x}}

 be a helper function for lifting into the pairing group, the proof verification is more clear

Assuming that the bilinear map is validly constructed, this demonstrates that 



q
(
x
)
(
x
−
i
)
=
p
(
x
)
−
y


{\displaystyle q(x)(x-i)=p(x)-y}

, without the validator knowing what 



p


{\displaystyle p}

 or 



q


{\displaystyle q}

 are. The validator can be assured of this because if 



τ
(
q
(
t
)
⋅
(
t
−
i
)
)
=
τ
(
p
(
t
)
−
y
)


{\displaystyle \tau (q(t)\cdot (t-i))=\tau (p(t)-y)}

, then the polynomials evaluate to the same output at the trapdoor value 



x
=
t


{\displaystyle x=t}

. This demonstrates the polynomials are identical, because, if the parameters were validly constructed, the trapdoor value is known to no one, meaning that engineering a polynomial to have a specific value at the trapdoor is impossible (according to the Schwartz–Zippel lemma). If 



q
(
x
)
(
x
−
i
)
=
p
(
x
)
−
y


{\displaystyle q(x)(x-i)=p(x)-y}

 is now verified to be true, then 



q


{\displaystyle q}

 is verified to exist, therefore 



p
(
x
)
−
y


{\displaystyle p(x)-y}

 must be polynomial-divisible by 



(
x
−
i
)


{\displaystyle (x-i)}

, so 



p
(
i
)
−
y
=
0


{\displaystyle p(i)-y=0}

 due to the factor theorem. This proves that the 



i


{\displaystyle i}

th value of the committed vector must have equaled 



y


{\displaystyle y}

, since that is the output of evaluating the committed polynomial at 



i


{\displaystyle i}

.

The utility of the bilinear map pairing is to allow the multiplication of 



q
(
x
)


{\displaystyle q(x)}

 by 



x
−
i


{\displaystyle x-i}

 to happen securely. These values truly lie in 





G


1




{\displaystyle \mathbb {G} _{1}}

, where division is assumed to be computationally hard. For example, 





G


1




{\displaystyle \mathbb {G} _{1}}

 might be an elliptic curve over a finite field, as is common in elliptic-curve cryptography. Then, the division assumption is called the elliptic curve discrete logarithm problem, and this assumption is also what guards the trapdoor value from being computed, making it also a foundation of KZG commitments. In that case, we want to check if 



q
(
x
)
(
x
−
i
)
=
p
(
x
)
−
y


{\displaystyle q(x)(x-i)=p(x)-y}

. This cannot be done without a pairing, because with values on the curve of 



G
⋅
q
(
x
)


{\displaystyle G\cdot q(x)}

 and 



G
⋅
(
x
−
i
)


{\displaystyle G\cdot (x-i)}

, we cannot compute 



G
⋅
(
q
(
x
)
(
x
−
i
)
)


{\displaystyle G\cdot (q(x)(x-i))}

. That would violate the computational Diffie–Hellman assumption, a foundational assumption in elliptic-curve cryptography.  We instead use a pairing to sidestep this problem. 



q
(
x
)


{\displaystyle q(x)}

 is still multiplied by 



G


{\displaystyle G}

 to get 



G
⋅
q
(
x
)


{\displaystyle G\cdot q(x)}

, but the other side of the multiplication is done in the paired group 





G


2




{\displaystyle \mathbb {G} _{2}}

, so, 



H
⋅
(
t
−
i
)


{\displaystyle H\cdot (t-i)}

. We compute 



e
(
G
⋅
q
(
t
)
,
H
⋅
(
t
−
i
)
)


{\displaystyle e(G\cdot q(t),H\cdot (t-i))}

, which, due to the bilinearity of the map, is equal to 



e
(
G
,
H

)

q
(
t
)
⋅
(
t
−
i
)




{\displaystyle e(G,H)^{q(t)\cdot (t-i)}}

. In this output group 





G


T




{\displaystyle \mathbb {G} _{T}}

 we still have the discrete logarithm problem, so even though we know that value and 



e
(
G
,
H
)


{\displaystyle e(G,H)}

, we cannot extract the exponent 



q
(
t
)
⋅
(
t
−
i
)


{\displaystyle q(t)\cdot (t-i)}

, preventing any contradiction with discrete logarithm earlier. This value can be compared to 



e
(
G
⋅
(
p
(
t
)
−
y
)
,
H
)
=
e
(
G
,
H

)

p
(
t
)
−
y




{\displaystyle e(G\cdot (p(t)-y),H)=e(G,H)^{p(t)-y}}

 though, and if 



e
(
G
,
H

)

q
(
t
)
⋅
(
t
−
i
)


=
e
(
G
,
H

)

p
(
t
)
−
y




{\displaystyle e(G,H)^{q(t)\cdot (t-i)}=e(G,H)^{p(t)-y}}

 we are able to conclude that 



q
(
t
)
⋅
(
t
−
i
)
=
p
(
t
)
−
y


{\displaystyle q(t)\cdot (t-i)=p(t)-y}

, without ever knowing what the actual value of 



t


{\displaystyle t}

 is, let alone 



q
(
t
)
(
t
−
i
)


{\displaystyle q(t)(t-i)}

.

Additionally, a KZG commitment can be extended to prove the values of any arbitrary 



k


{\displaystyle k}

 values of 



X


{\displaystyle X}

 (not just one value), with the proof size remaining 



O
(
1
)


{\displaystyle O(1)}

, but the proof verification time scales with 



O
(
k
)


{\displaystyle O(k)}

. The proof is the same, but instead of subtracting a constant 



y


{\displaystyle y}

, we subtract a polynomial that causes multiple roots, at all the locations we want to prove, and instead of dividing by 



x
−
i


{\displaystyle x-i}

 we divide by 




∏

i


x
−
i


{\textstyle \prod _{i}x-i}

 for those same locations.[26]

It is an interesting question in quantum cryptography if unconditionally secure bit commitment protocols exist on the quantum level, that is, protocols which are (at least asymptotically) binding and concealing even if there are no restrictions on the computational resources. One could hope that there might be a way to exploit the intrinsic properties of quantum mechanics, as in the protocols for unconditionally secure key distribution.

However, this is impossible, as Dominic Mayers showed in 1996 (see[27] for the original proof). Any such protocol can be reduced to a protocol where the system is in one of two pure states after the commitment phase, depending on the bit Alice wants to commit. If the protocol is unconditionally concealing, then Alice can unitarily transform these states into each other using the properties of the Schmidt decomposition, effectively defeating the binding property.

One subtle assumption of the proof is that the commit phase must be finished at some point in time. This leaves room for protocols that require a continuing information flow until the bit is unveiled or the protocol is cancelled, in which case it is not binding anymore.[28] More generally,  Mayers' proof applies only to protocols that exploit quantum physics but not special relativity. Kent has shown that there exist unconditionally secure protocols for bit commitment that exploit the principle of special relativity stating that information cannot travel faster than light.[29]

Physical unclonable functions (PUFs) rely on the use of a physical key with internal randomness, which is hard to clone or to emulate. Electronic, optical and other types of PUFs[30] have been discussed extensively in the literature, in connection with their potential cryptographic applications including commitment schemes.[31][32]
