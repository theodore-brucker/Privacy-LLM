In formal language theory, a  context-free language (CFL) is a language generated by a context-free grammar (CFG).

Context-free languages have many applications in programming languages, in particular, most arithmetic expressions are generated by context-free grammars.

Different context-free grammars can generate the same context-free language. Intrinsic properties of the language can be distinguished from extrinsic properties of a particular grammar by comparing multiple grammars that describe the language.

The set of all context-free languages is identical to the set of languages accepted by pushdown automata, which makes these languages amenable to parsing. Further, for a given CFG, there is a direct way to produce a pushdown automaton for the grammar (and thereby the corresponding language), though going the other way (producing a grammar given an automaton) is not as direct.

An example context-free language is 



L
=
{

a

n



b

n


:
n
≥
1
}


{\displaystyle L=\{a^{n}b^{n}:n\geq 1\}}

, the language of all non-empty even-length strings, the entire first halves of which are a's, and the entire second halves of which are b's. L is generated by the grammar 



S
→
a
S
b
 

|

 
a
b


{\displaystyle S\to aSb~|~ab}

.
This language is not regular.
It is accepted by the pushdown automaton 



M
=
(
{

q

0


,

q

1


,

q

f


}
,
{
a
,
b
}
,
{
a
,
z
}
,
δ
,

q

0


,
z
,
{

q

f


}
)


{\displaystyle M=(\{q_{0},q_{1},q_{f}\},\{a,b\},\{a,z\},\delta ,q_{0},z,\{q_{f}\})}

 where 



δ


{\displaystyle \delta }

 is defined as follows:[note 1]

Unambiguous CFLs are a proper subset of all CFLs: there are inherently ambiguous CFLs. An example of an inherently ambiguous CFL is the union of 



{

a

n



b

m



c

m



d

n



|

n
,
m
>
0
}


{\displaystyle \{a^{n}b^{m}c^{m}d^{n}|n,m>0\}}

 with 



{

a

n



b

n



c

m



d

m



|

n
,
m
>
0
}


{\displaystyle \{a^{n}b^{n}c^{m}d^{m}|n,m>0\}}

. This set is context-free, since the union of two context-free languages is always context-free. But there is no way to unambiguously parse strings in the (non-context-free) subset 



{

a

n



b

n



c

n



d

n



|

n
>
0
}


{\displaystyle \{a^{n}b^{n}c^{n}d^{n}|n>0\}}

 which is the intersection of these two languages.[1]

The language of all properly matched parentheses is generated by the grammar 



S
→
S
S
 

|

 
(
S
)
 

|

 
ε


{\displaystyle S\to SS~|~(S)~|~\varepsilon }

.

The context-free nature of the language makes it simple to parse with a pushdown automaton.

Determining an instance of the membership problem; i.e. given a string 



w


{\displaystyle w}

, determine whether 



w
∈
L
(
G
)


{\displaystyle w\in L(G)}

 where 



L


{\displaystyle L}

 is the language generated by a given grammar 



G


{\displaystyle G}

; is also known as recognition. Context-free recognition for Chomsky normal form grammars was shown by Leslie G. Valiant to be reducible to boolean matrix multiplication, thus inheriting its complexity upper bound of O(n2.3728596).[2][note 2]
Conversely, Lillian Lee has shown O(n3−ε) boolean matrix multiplication to be reducible to O(n3−3ε) CFG parsing, thus establishing some kind of lower bound for the latter.[3]

Practical uses of context-free languages require also to produce a derivation tree that exhibits the  structure that the grammar associates with the given string. The process of producing this tree is called parsing. Known parsers have a time complexity that is cubic in the size of the string that is parsed.

Formally, the set of all context-free languages is identical to the set of languages accepted by pushdown automata (PDA). Parser algorithms for context-free languages include the CYK algorithm and Earley's Algorithm.

A special subclass of context-free languages are the deterministic context-free languages which are defined as the set of languages accepted by a deterministic pushdown automaton and can be parsed by a LR(k) parser.[4]

See also parsing expression grammar as an alternative approach to grammar and parser.

The class of context-free languages is closed under the following operations. That is, if L and P are context-free languages, the following languages are context-free as well:

The context-free languages are not closed under intersection.  This can be seen by taking the languages 



A
=
{

a

n



b

n



c

m


∣
m
,
n
≥
0
}


{\displaystyle A=\{a^{n}b^{n}c^{m}\mid m,n\geq 0\}}

 and 



B
=
{

a

m



b

n



c

n


∣
m
,
n
≥
0
}


{\displaystyle B=\{a^{m}b^{n}c^{n}\mid m,n\geq 0\}}

, which are both context-free.[note 3] Their intersection is 



A
∩
B
=
{

a

n



b

n



c

n


∣
n
≥
0
}


{\displaystyle A\cap B=\{a^{n}b^{n}c^{n}\mid n\geq 0\}}

, which can be shown to be non-context-free by the pumping lemma for context-free languages. As a consequence, context-free languages cannot be closed under complementation, as for any languages A and B, their intersection can be expressed by union and complement:  



A
∩
B
=





A
¯


∪


B
¯



¯




{\displaystyle A\cap B={\overline {{\overline {A}}\cup {\overline {B}}}}}

. In particular, context-free language cannot be closed under difference, since complement can be expressed by difference: 





L
¯


=

Σ

∗


∖
L


{\displaystyle {\overline {L}}=\Sigma ^{*}\setminus L}

.[12]

However, if L is a context-free language and D is a regular language then both their intersection 



L
∩
D


{\displaystyle L\cap D}

 and their difference 



L
∖
D


{\displaystyle L\setminus D}

 are context-free languages.[13]

In formal language theory, questions about regular languages are usually decidable, but ones about context-free languages are often not. It is decidable whether such a language is finite, but not whether it contains every possible string, is regular, is unambiguous, or is equivalent to a language with a different grammar.

The following problems are undecidable for arbitrarily given context-free grammars A and B:

The following problems are decidable for arbitrary context-free languages:

According to Hopcroft, Motwani, Ullman (2003),[25] 
many of the fundamental closure and (un)decidability properties of context-free languages were shown in the 1961 paper of Bar-Hillel, Perles, and Shamir[26]

The set 



{

a

n



b

n



c

n



d

n



|

n
>
0
}


{\displaystyle \{a^{n}b^{n}c^{n}d^{n}|n>0\}}

 is a context-sensitive language, but there does not exist a context-free grammar generating this language.[27] So there exist context-sensitive languages which are not context-free. To prove that a given language is not context-free, one may employ the pumping lemma for context-free languages[26] or a number of other methods, such as Ogden's lemma or Parikh's theorem.[28]
